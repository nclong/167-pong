	<!doctype html>
<html>
<head>
	<meta charset='UTF-8' />
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no"/>
  	<title>Space Pong : By VGDC</title>
  	<!-- MATERIALIZE CSS  -->
  	<link href="css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  	<link href="css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  	<!-- my own css page -->
  	<link href="css/client.css" type="text/css" rel="stylesheet"/>
  	<link rel="icon" type="image/png" href="favicon.ico"/> 
  	<!-- REPLACE WITH YOUR OWN-->
	<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>

 	<script> // Drawing script! 
	 	// SET canvas properties here.

		var cWidth; // Width of the canvas.
		var cHeight; // Height of the canvas.
		var display; // reference to the canvas.
		var ctx; // brush.

		// game variables

		var connected;

		var stepsize; // The distance the paddle travels.
		var player1Position; // position of player one paddle.
		var player1; // reference to player1 sprite.
		var paddleOffset; // offset for the paddle sprite.

		var ballVelocityX; // Velocity of the ball
		var ballVelocityY; // Velocity of the ball
		var ballX; // Ball location X
		var ballY; // Ball location Y
		var ballOffsetX; // Offset for ball sprite X
		var ballOffsetY; // Offset for ball sprite Y

		// game statistics

		var consecHits; // consecutive hits
		var score; // the score of the players
		var opportunity; // opportunities 


		// image links

		var board; // Main game board sprite
		var borderTop;  // border of top sprite
		var borderRight;  // right border sprite
		var borderLeft; // left border sprite
		var borderBottom;  // bottom border sprite
		var ball; // ball sprite

		// Initialize all variables.

	function initialize() { 

		connected = false; // you are not connected to server.

 		// SET BACKGROUND canvas dimensions here.
	 	cWidth = 1200;
	 	cHeight = 500;

	 	// Bind display to the canvas, and get my brush.
	 	display = document.getElementById("myCanvas"); // myCanvas 
	 	ctx = display.getContext("2d"); // 2D, display.

		// Set stepsize here.
		stepsize = 30; // change as necessary.
		player1Position = cHeight/2;// always starts at the center.

		// initialize stats variables

		consecHits = 0; // consecutive hits
		score = 0; // the score of the players
		opportunity = 9000; // opportunities 

		// Get my sprites.
 		board = document.getElementById("bg");
 		borderTop = document.getElementById("top-Border");
 		borderRight = document.getElementById("right-Border"); 
 		borderLeft = document.getElementById("right-Border"); // use the same!
 		borderBottom = document.getElementById("bottom-Border");
 		player1 = document.getElementById("paddle1");
 		ball = document.getElementById("baller");

 		// Set my sprite offsets here.
		paddleOffset = 100;
		ballOffsetX = 10;
 		ballOffsetY = 10;

 		// Specify ball starting position and velocity
 		ballVelocityX = 10;
 		ballVelocityY = 10;
 		ballX = cWidth/2;
 		ballY = cHeight/2;
	
		// Draw the game board.
		drawGameBoard(); 

		// Update the initial connection status.
		//connectionToggle();
}
// 	


	function drawGameBoard() // draws all the static elements.
	{
		ctx.drawImage(board, 0, 0, 1200, 500); 
		ctx.drawImage(borderRight, 1180, 0, 20, 500);
		ctx.drawImage(borderLeft, 0, 0, 20, 500);
		ctx.drawImage(borderTop, 0, 0, 1200, 20); 
		ctx.drawImage(borderBottom, 0, 480, 1200, 20);
	}

	function drawPaddle() // the value we get 
	{
		 //mtx.clearRect(0, 0, cWidth, cHeight);
		ctx.drawImage(player1, 20, player1Position, 30, 100);
	}

	function movePaddleUp()
	{
		console.log("Paddle Up");
		 
		if(player1Position-stepsize > 0)
		{
			player1Position-=stepsize;
			send("up");
		}
	}

	function movePaddleDown()
	{
		console.log("Paddle Down");

		if(player1Position+stepsize+100 < cHeight) // 500
		{
			player1Position+=stepsize;
			send("down");
		}
	}

	function drawBall() // draw da ball.
	{
		ctx.drawImage(ball, ballX-ballOffsetX, ballY-ballOffsetY, 120, 80);
	}

	function update()
	{
		ballX += ballVelocityX;
		ballY -= ballVelocityY;
	}

	$(document).ready(function(){
		initialize();
		window.onkeydown = keyPress;
		//window.onkeyup = release;
		window.setInterval(update, 33);
		window.setInterval(drawGameBoard, 33); // draw the board.
		window.setInterval(drawPaddle, 33);
		window.setInterval(drawBall, 33);
		window.setInterval(refreshStats, 33); // refreshes stats.
		// window.setInterval(connectionToggle, 3000); // updates every 3 s.
	});

	function keyPress(e)
	{
		console.log("Keypressed");
	if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
	        e.preventDefault();
	    }

		if(e.keyCode == 38) {
	        movePaddleUp();
	       
	    }
	    else if(e.keyCode == 40) {
	        movePaddleDown();
	    }
	}


	function setConsecutiveHits(i)
	{
		console.log("Function: set consecutive hits.");
		var consecHitsSet = document.getElementById("hit");
		consecHitsSet.innerHTML = i; 
	}

	function setScore(s)
	{
		console.log("Function: set score.");
		var scoreSet = document.getElementById("score");
		score.innerHTML = s;
	}

	function setOpportunity(o)
	{
		console.log("Function: set opportunity.");
		var oppSet = document.getElementById("opp");
		opp.innerHTML = o;
	}

	function incrementScore()
	{
		console.log("Function: increment score.");
		var oppSet = document.getElementById("opp");
		oppSet.innerHTML = score; 
	}

	function incrementOpportunity()
	{
		console.log("Function: increment opportunity.");
		var oppSet = document.getElementById("opp");
		oppSet.innerHTML++; 
	}

	function refreshStats() // refreshes stats board.
	{
		setConsecutiveHits(consecHits)
		setScore(score);
		setOpportunity(opportunity);
		
	}

</script>
</head>

<body class="grey lighten-3">

<!-- PUT THE CLIENT SIDE ASSETS HERE -->
<!-- PADDLE SPRITE -->
	<img id="paddle1" src="images/Paddle.png" alt="paddle1"
	width="0" height="0">
	<img id="paddle2" src="images/Paddle2.png" alt="paddle1"
	width="0" height="0">
<!-- BALL SPRITE -->
	<img id="baller" src="images/Ball.png" alt="ball"
	width="0" height="0">
<!-- CANVAS BACKGROUND -->
	<img id="bg" src="images/background.png" alt="bg"
	width="0" height="0">
	<img id="bottom-Border" src="images/Bottom.png" alt="bg"
	width="0" height="0">
	<img id="top-Border" src="images/Top.png" alt="bg"
	width="0" height="0">
	<img id="right-Border" src="images/Right.png" alt="bg"
	width="0" height="0">



<h1 class="center"> Space Pong </h1> <!-- Header -->

<!-- Input client IP and other things here -->
<div class="container valign-wrapper">
	<div class="row">
	  <form class="col s12">
	    <div class="row">
	      <div class="input-field col s3">
	        <i class="mdi-action-account-circle prefix"></i>
	        <input id='ip' name='ip' id="icon_prefix" type="text" class="validate">
	        <label for="icon_prefix">Server IP:</label>
	      </div>

	      <div class="input-field col s3">
	        <i class="mdi-communication-phone prefix"></i>
	        <input id='port' name='port' id="icon_telephone" type="text" class="validate">
	        <label for="icon_telephone">Server Port:</label>
	      </div>

	      <div class="input-field col s3">
	        <i class="mdi-communication-phone prefix"></i>
	        <input id='name' name='name' id="icon_telephone" type="text" class="validate">
	        <label for="icon_telephone">User Name: (!)</label>
	      </div>

		<div class="col s3">
	       <a id="toggleConnection" onClick="connectionToggle()" class="waves-effect waves-light btn"><i class="mdi-file-cloud left"></i>Connect</a>


	      </div>
	     	
	    </div>
	  </form>
	</div>
</div>

<!-- Hit the button to "begin" -->
<div class="container valign-wrapper"> <!-- Valign wrapper auto-centers -->
 <button class="btn red waves-effect waves-light" onclick="incrementOpportunity()" type="submit" name="action">LET US PLAY PONG! <i class="mdi-content-send right"></i> 
  </button> 
</div>

<div class="container grey lighten-2">

<div id="game" class="row">
	<div class="col s4">
	<a>Consecutive Hits<span id="hit" class="badge"></span></a></div>
	<div class="col s4">
	<a>Score<span id="score" class="badge"></span></a></div>
	<div class="col s4">
	<a>Opportunities<span id="opp" class="new badge"></span></a></div>
</div>
</div>



<div class="container valign-wrapper">
	<canvas id="myCanvas"  width="1200" height="500" style="border:4px solid #000000;">
	</canvas>
</div>



<!-- Footer -->
  <footer class="grey darken-4">
    <div class="container">
      <div class="row"> 
      <p class="flow-text white-text">Made with love from VGDC:</p>
      <h3 class="white">Team</h3>
      <ul class="flow-text white-text">
      <li>Nick Long : Backend Developer</li>
      <li>Connor Stokes : Features Developer</li>
      <li>Eric Thoi : Artist</li>
      <li>Gwyn Gerlits : Mascot</li>
      <li>Jason Chiu : Frontend Developer</li>
      </ul>

   

      </div>
    </div>
    <div class="footer-copyright">
      <div class="container">
      This site was made with <a class="orange-text lighten-3" href="http://materializecss.com">Materialize.</a> Please check out their work!
      </div>
    </div>
  </footer>

  <!--OTHER Scripts-->
  <script src="js/materialize.js"></script>
  <script src="js/init.js"></script>

	<script src="fancywebsocket.js"></script> <!-- NEED THIS -->
	<script>
		var Server;

		function log( text ) {
			$log = $('#log');
			//Add text to log
			$log.append(($log.val()?"\n":'')+text);
			//Autoscroll
			$log[0].scrollTop = $log[0].scrollHeight - $log[0].clientHeight;
		}

		function send( text ) {
			Server.send( 'message', text );
			console.log("Message sent:" + text);
		}

		function connectionToggle() {
			if (connected) // if we are connectd
			{
				console.log("Currently connected - changing to d/c.")
				var c = document.getElementById("toggleConnect");
				disconnect(); // run disconnect.
				c.innerHTML = "Connect."
			}
			else if (!connected) // if not connected.
			{
				console.log("Currently not connected - changing to connect.")
				var c = document.getElementById("toggleConnection");
				connect(); // run connect.
				c.innerHTML = "Connecting..."

			}

		}

		function disconnect(){
			 console.log("Disconnecting from server.");
			 Server.send("close");

			}

       	 function connect(){
            console.log("Connecting...to server.");
			Server = new FancyWebSocket('ws://' + document.getElementById('ip').value + ':' + document.getElementById('port').value);

			//Let the user know we're connected
			Server.bind('open', function() {
			    console.log("Connected to server.");
			    send("Name:" + document.getElementById('name').val);
			    connected = true; // set this to true.
			    var c = document.getElementById("toggleConnection");
			    c.innerHTML = "Connected! (Press to D/C)"

			});

			//OH NOES! Disconnection occurred.
			Server.bind('close', function( data ) {
				console.log( "Disconnected." );
			});

			//Log any messages sent from server
			Server.bind('message', function (payload) {
			    console.log("Received Message: " + payload);
			    typeStr = payload.substring(0, 2);
			    dataStr = payload.substring(2);
			    if( typeStr === "pp")
			    {
                    // Set paddle position.
                    console.log("Message: Paddle Position Update");
                    player1Position = dataStr;
			    }
			    else if( typeStr === "bp" )
			    {	
			    	// Set the ball position.
<<<<<<< HEAD
			        var xStr = dataStr.substring(0, dataStr.indexOf(","));
			        var yStr = dataStr.substring(dataStr.indexOf(",")+1);
=======
			    	console.log("Message: Ball Position Update");
			        var xStr = dataStr(0, dataStr.indexOf(","));
			        var yStr = dataStr(dataStr.indexOf(",")+1);
>>>>>>> 18c338c6b76f572fb7211b787ed40e38cb3346e3
			        ballX = xStr;
                    ballY = yStr;
			    }
			    else if( typeStr === "bv" )
			    {
			    	// Set the ball velocity.
<<<<<<< HEAD
			        var xStr = dataStr.substring(0, dataStr.indexOf(","));
			        var yStr = dataStr.substring(dataStr.indexOf(",")+1);
=======
			    	console.log("Message: Ball Velocity Update");
			        var xStr = dataStr(0, dataStr.indexOf(","));
			        var yStr = dataStr(dataStr.indexOf(",")+1);
>>>>>>> 18c338c6b76f572fb7211b787ed40e38cb3346e3
			        ballVelocityX = xStr;
                    ballVelocityY = yStr;
			    }
			    else if (typeStr === "cs")
			    {
			        consecHits = dataStr;
			    }
			    else if (typeStr === "ts")
			    {
			        score = dataStr;
			    }
			    else if (typeStr === "to")
			    {
			        opportunity = dataStr;
			    }

			});

			Server.connect();
        }

	</script>
     


</body>

</html>
